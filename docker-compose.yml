version: '3.8'

services:
  # Application Services

  # Infrastructure Services
  postgres:
    image: postgres
    container_name: postgres_interview
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: interview_prep
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-backup-data:/var/lib/postgresql/backup
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  gptj:
    image: localai/localai:latest
    container_name: localai_gptj
    ports:
      - "8086:8080"
    volumes:
      - ./models:/models
    environment:
      - OPENAI_API_KEY=your-key
      - MODELS_PATH=/models
      - DEBUG=true
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/v1/models" ]
      interval: 10s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: 
  postgres-backup-data:
