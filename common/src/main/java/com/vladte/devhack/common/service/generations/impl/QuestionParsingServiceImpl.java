package com.vladte.devhack.common.service.generations.impl;

import com.vladte.devhack.common.service.generations.QuestionParsingService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * Implementation of the QuestionParsingService interface for parsing generated text into question texts.
 */
@Service
public class QuestionParsingServiceImpl implements QuestionParsingService {

    private static final Logger logger = LoggerFactory.getLogger(QuestionParsingServiceImpl.class);

    /**
     * Parse the generated text into a list of question texts.
     *
     * @param generatedText the text generated by the AI
     * @return a list of question texts
     */
    @Override
    public List<String> parseQuestionTexts(String generatedText) {
        logger.debug("Parsing generated text of length: {} characters", generatedText.length());
        List<String> questions = new ArrayList<>();

        // Split the text by lines
        String[] lines = generatedText.split("\n");
        logger.debug("Split text into {} lines", lines.length);

        StringBuilder currentQuestion = new StringBuilder();
        int questionCount = 0;

        for (String line : lines) {
            // If the line starts with "Question: ", it's a new question
            if (line.trim().startsWith("Question: ")) {
                // If we have a current question, add it to the list
                if (currentQuestion.length() > 0) {
                    questions.add(currentQuestion.toString().trim());
                    logger.debug("Added question #{}: {}", questionCount++,
                            currentQuestion.length() > 50 ? currentQuestion.substring(0, 47) + "..." : currentQuestion);
                    currentQuestion = new StringBuilder();
                }
                // Add the new question text without the "Question: " prefix
                String questionText = line.trim().substring("Question: ".length());
                logger.debug("Found new question starting with: {}",
                        questionText.length() > 50 ? questionText.substring(0, 47) + "..." : questionText);
                currentQuestion.append(questionText);
            } else if (currentQuestion.length() > 0) {
                // If we have a current question and the line doesn't start with "Question: ",
                // it's a continuation of the current question
                logger.trace("Adding continuation line to current question: {}", line.trim());
                currentQuestion.append(" ").append(line.trim());
            } else {
                logger.trace("Skipping line: {}", line.trim());
            }
        }

        // Add the last question if there is one
        if (currentQuestion.length() > 0) {
            questions.add(currentQuestion.toString().trim());
            logger.debug("Added final question #{}: {}", questionCount++,
                    currentQuestion.length() > 50 ? currentQuestion.substring(0, 47) + "..." : currentQuestion);
        }

        logger.info("Parsed {} questions from generated text", questions.size());
        return questions;
    }
}